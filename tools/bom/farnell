#!/bin/env python
from urllib import urlopen
import string, sgmllib, sys

def getData(partNumber):
	page = urlopen('http://xgoat.com/p/farnell/'+str(partNumber)).read()

	start = string.find(page, '<div id="availability">')
	if start == -1:
		return False
	info = page[start:]
	end = string.find(info, '</div>')
	availInfo = info[:end]

	start = string.find(page, '<div id="price">')
	if start == -1:
		return False
	info = page[start:]
	end = string.find(info, '</div>')
	priceInfo = info[:end]

	return availInfo+priceInfo

class MyParser(sgmllib.SGMLParser):
	"A simple parser class."

	def parse(self, s):
		"Parse the given string 's'."
		self.feed(s)
		self.close()

	def __init__(self, verbose=0):
		"Initialise an object, passing 'verbose' to the superclass."

		sgmllib.SGMLParser.__init__(self, verbose)
		self.qty_range = []
		self.cost = []
		self.inside_td_element = 0
		self.inside_p_element = 0
		self.inside_b_element = 0
		self.last_data = ''
		self.qty = True

	def start_td(self, attributes):
		"Process a table div."
		self.inside_td_element += 1

	def end_td(self):
		"Record the end of a table div."
		self.inside_td_element -= 1

	def start_p(self, attributes):
		"Process a paragraph."
		self.inside_p_element += 1

	def end_p(self):
		"Record the end of a paragraph."
		self.inside_p_element -= 1

	def start_b(self, attributes):
		"Process a bold."
		self.inside_b_element += 1

	def end_b(self):
		"Record the end of a bold."
		self.inside_b_element -= 1

	def handle_data(self, data):
		"Handle the textual 'data'."

		data = data.replace('\n', '').replace(':', '')
		if data == '':
			return

		if self.inside_td_element > 0:
		#	print 'td:"'+data+'"'
			if self.qty:
				self.qty_range.append(data)
				self.qty = False
			else:
				self.cost.append(data[2:])
				self.qty = True

		elif self.inside_b_element > 0:
		#	print 'b:"'+data+'"'
			self.last_data = data

		elif self.inside_p_element > 0:
		#	print 'p:"'+data+'"'
			if self.last_data == 'Price For':
				self.price_for = data
			elif self.last_data == 'Minimum Order Quantity':
				self.min_order = int(data)
			elif self.last_data == 'Order Multiple':
				self.multi = int(data)
			elif self.last_data == 'Availability':
				if data.isdigit():
					self.avail = int(data)
				else:
					self.avail = str(data)

	def get_info(self):
		"Return a dict of the info garnered."
		return dict(qty=self.qty_range, price=self.cost, num_for_price=self.price_for, min_order=self.min_order, multiple=self.multi, number_available=self.avail)

	def print_info(self):
		"Print a the info garnered in a nice way."
		print ' Number Available:',self.avail
		print ' Price For:',self.price_for
		print ' Minimum Order Quantity:',self.min_order
		print ' Order Multiple:',self.multi
		print ' Pricing:'
		for i in range(0, len(self.qty_range)):
			print ' ',self.qty_range[i],'  \t',self.cost[i]


if len(sys.argv) > 1:
	id = sys.argv[1]
else:
	print 'Note: you can also specify a part number as a command line argument.'
	id = ''
	while id == '':
		id = raw_input('Enter part number: ')

print 'Checking part number',id

myHTML = getData(id)
#print myHTML

# Try and process the page.
# The class should have been defined first, remember.
if myHTML != False:
	myparser = MyParser()
	myparser.parse(myHTML)

	# Show the info.
	myparser.print_info()
else:
	print 'Part number',id,"either doesn't exist or isn't unique"
